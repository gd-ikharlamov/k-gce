---
- name: "waiting nexus to start up"
  wait_for:
    host: 127.0.0.1
    port: 8081
    sleep: 10
    timeout: 300

- name: "change admin password"
  block:
    - name: "upload update_admin_password script"
      uri:
        url: "http://localhost:8081/service/siesta/rest/v1/script"
        user: "admin"
        password: "{{ nexus_default_admin_password }}"
        body_format: json
        method: POST
        force_basic_auth: yes
        status_code: 204
        body:
          name: "update_admin_password"
          type: 'groovy'
          content: "{{ lookup('file', 'groovy/update_admin_password.groovy') }}"
    - name: "run update_admin_password script"
      uri:
        url: "http://localhost:8081/service/siesta/rest/v1/script/update_admin_password/run"
        user: "admin"
        password: "{{ nexus_default_admin_password }}"
        headers:
          Content-Type: "text/plain"
        method: POST
        status_code: 200,204
        force_basic_auth: yes
        body: "{{ args | to_json }}"
      vars:
        args:
          password: "{{ nexus_admin_password }}"

- name: "upload api scripts"
  include_tasks: upload-api-script.yml
  with_items:
    - update_admin_password
    - delete_repo
    - setup_ldap
    - create_blobstore
    - create_repo_docker_proxy
    - create_repo_docker_hosted
    - create_repo_docker_group

# - name: delete default repositories
#   include_tasks: run-api-script.yml
#   vars:
#     script_name: delete_repo
#     args:
#       name: "{{ item }}"
#   with_items:
#     - maven-central
#     - maven-public
#     - maven-releases
#     - maven-snapshots
#     - nuget-group
#     - nuget-hosted
#     - nuget.org-proxy
#
# - name: delete default repositories
#   include_tasks: run-api-script.yml
#   vars:
#     script_name: delete_blobstore
#     args:
#       name: "{{ item }}"
#   with_items:
#     - default

- name: "add ldap configuration"
  include_tasks: run-api-script.yml
  vars:
    script_name: setup_ldap
    args:
      name: "{{ ldap_conf.name }}"
      protocol: "{{ ldap_conf.protocol }}"
      hostname: "{{ ldap_conf.hostname }}"
      port: "{{ ldap_conf.port }}"
      auth: "{{ ldap_conf.auth }}"
      username: "{{ ldap_conf.auth_username }}"
      password: "{{ ldap_conf.auth_password }}"
      search_base: "{{ ldap_conf.search_base }}"
      user_base_dn: "{{ ldap_conf.user_base_dn }}"
      user_ldap_conf.filter: "{{ ldap_conf.user_filter }}"
      user_object_class: "{{ ldap_conf.user_object_class }}"
      user_id_attribute: "{{ ldap_conf.user_id_attribute }}"
      user_real_name_attribute: "{{ ldap_conf.user_real_name_attribute }}"
      user_email_attribute: "{{ ldap_conf.user_email_attribute }}"
      map_groups_as_roles: "{{ ldap_conf.map_groups_as_roles }}"
      group_base_dn: "{{ ldap_conf.group_base_dn }}"
      group_object_class: "{{ ldap_conf.group_object_class }}"
      group_id_attribute: "{{ ldap_conf.group_id_attribute }}"
      group_member_attribute: "{{ ldap_conf.group_member_attribute }}"
      group_member_format: "{{ ldap_conf.group_member_format }}"
      user_subtree: "{{ ldap_conf.user_subtree }}"
      group_subtree: "{{ ldap_conf.group_subtree }}"

- name: "create docker blob store"
  block:
    - file:
        path: "{{ docker_blob_store }}"
        owner: nexus
        group: nexus
        state: directory
        recurse: true
    - include_tasks: run-api-script.yml
      vars:
        script_name : create_blobstore
        args:
          name: "docker"
          path: "{{ nexus_karaf_data }}/blobs/docker"

- name: "create docker proxy repository"
  include_tasks: run-api-script.yml
  vars:
    script_name: create_repo_docker_proxy
    args:
      blob_store: "{{ docker_store_conf.blob_store }}"
      strict_content_validation: "{{ docker_store_conf.strict_content_validation }}"
      version_policy: "{{ docker_store_conf.version_policy }}"
      layout_policy: "{{ docker_store_conf.layout_policy }}"
      write_policy: "{{ docker_store_conf.write_policy }}"
      name: "{{ docker_proxy_conf.name }}"
      http_port: "{{ docker_proxy_conf.http_port }}"
      v1_enabled: "{{ docker_proxy_conf.v1_enabled }}"
      index_type: "{{ docker_proxy_conf.index_type }}"
      proxy_url: "{{ docker_proxy_conf.proxy_url }}"
      use_nexus_certificates_to_access_index: "{{ docker_proxy_conf.use_nexus_certificates_to_access_index }}"

- name: "create docker hosted repository"
  include_tasks: run-api-script.yml
  vars:
    script_name: create_repo_docker_hosted
    args:
      blob_store: "{{ docker_store_conf.blob_store }}"
      strict_content_validation: "{{ docker_store_conf.strict_content_validation }}"
      version_policy: "{{ docker_store_conf.version_policy }}"
      layout_policy: "{{ docker_store_conf.layout_policy }}"
      write_policy: "{{ docker_store_conf.write_policy }}"
      name: "{{ docker_hosted_conf.name }}"
      http_port: "{{ docker_hosted_conf.http_port }}"
      v1_enabled: "{{ docker_hosted_conf.v1_enabled }}"

- name: "create docker group repository"
  include_tasks: run-api-script.yml
  vars:
    script_name: create_repo_docker_group
    args:
      blob_store: "{{ docker_store_conf.blob_store }}"
      strict_content_validation: "{{ docker_store_conf.strict_content_validation }}"
      version_policy: "{{ docker_store_conf.version_policy }}"
      layout_policy: "{{ docker_store_conf.layout_policy }}"
      write_policy: "{{ docker_store_conf.write_policy }}"
      name: "{{ docker_group_conf.name }}"
      http_port: "{{ docker_group_conf.http_port }}"
      v1_enabled: "{{ docker_group_conf.v1_enabled }}"
      member_repos:
        - docker-hosted
        - docker-proxy
